.content.svelte-h6ymk4 h2{font-size:1.4em;font-weight:500}table, caption, tbody, tfoot, thead, tr, th, td{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}table{border-collapse:collapse;border-spacing:0}table{border-collapse:collapse;width:100%}tr{border-bottom:1px solid #ccc}th{font-weight:bold}th, td{text-align:left;padding:4px}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3NsdWddLjAxZWIyNDBlLmNzcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vW3NsdWddLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cclxuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlbG9hZCh7IHBhcmFtcywgcXVlcnkgfSkge1xyXG4gICAgLy8gdGhlIGBzbHVnYCBwYXJhbWV0ZXIgaXMgYXZhaWxhYmxlIGJlY2F1c2VcclxuICAgIC8vIHRoaXMgZmlsZSBpcyBjYWxsZWQgW3NsdWddLnN2ZWx0ZVxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5mZXRjaChgYmxvZy8ke3BhcmFtcy5zbHVnfS5qc29uYCk7XHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcclxuXHJcbiAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgIHJldHVybiB7IHBvc3Q6IGRhdGEgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZXJyb3IocmVzLnN0YXR1cywgZGF0YS5tZXNzYWdlKTtcclxuICAgIH1cclxuICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHNjcmlwdD5cclxuICBpbXBvcnQgR3JhZGllbnRIZWFkaW5nIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0dyYWRpZW50SGVhZGluZy5zdmVsdGVcIjtcclxuICBleHBvcnQgbGV0IHBvc3Q7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG4gIC8qXHJcblx0XHRCeSBkZWZhdWx0LCBDU1MgaXMgbG9jYWxseSBzY29wZWQgdG8gdGhlIGNvbXBvbmVudCxcclxuXHRcdGFuZCBhbnkgdW51c2VkIHN0eWxlcyBhcmUgZGVhZC1jb2RlLWVsaW1pbmF0ZWQuXHJcblx0XHRJbiB0aGlzIHBhZ2UsIFN2ZWx0ZSBjYW4ndCBrbm93IHdoaWNoIGVsZW1lbnRzIGFyZVxyXG5cdFx0Z29pbmcgdG8gYXBwZWFyIGluc2lkZSB0aGUge3t7cG9zdC5odG1sfX19IGJsb2NrLFxyXG5cdFx0c28gd2UgaGF2ZSB0byB1c2UgdGhlIDpnbG9iYWwoLi4uKSBtb2RpZmllciB0byB0YXJnZXRcclxuXHRcdGFsbCBlbGVtZW50cyBpbnNpZGUgLmNvbnRlbnRcclxuXHQqL1xyXG4gIC5jb250ZW50IDpnbG9iYWwoaDIpIHtcclxuICAgIGZvbnQtc2l6ZTogMS40ZW07XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG4gIH1cclxuXHJcbiAgOmdsb2JhbCh0YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCkge1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIGJvcmRlcjogMDtcclxuICAgIGZvbnQtc2l6ZTogMTAwJTtcclxuICAgIGZvbnQ6IGluaGVyaXQ7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XHJcbiAgfVxyXG4gIDpnbG9iYWwodGFibGUpIHtcclxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XHJcbiAgICBib3JkZXItc3BhY2luZzogMDtcclxuICB9XHJcblxyXG4gIDpnbG9iYWwodGFibGUpIHtcclxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcbiAgOmdsb2JhbCh0cikge1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNjY2M7XHJcbiAgfVxyXG5cclxuICA6Z2xvYmFsKHRoKSB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcbiAgOmdsb2JhbCh0aCwgdGQpIHtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBwYWRkaW5nOiA0cHg7XHJcbiAgfVxyXG48L3N0eWxlPlxyXG5cclxuPHN2ZWx0ZTpoZWFkPlxyXG4gIDx0aXRsZT57cG9zdC50aXRsZX08L3RpdGxlPlxyXG4gIDxzdHlsZT5cclxuICAgIGNvZGVbY2xhc3MqPVwibGFuZ3VhZ2UtXCJdLFxyXG4gICAgcHJlW2NsYXNzKj1cImxhbmd1YWdlLVwiXSB7XHJcbiAgICAgIGNvbG9yOiAjZjhmOGYyO1xyXG4gICAgICBiYWNrZ3JvdW5kOiBub25lO1xyXG4gICAgICB0ZXh0LXNoYWRvdzogMCAxcHggcmdiYSgwLCAwLCAwLCAwLjMpO1xyXG4gICAgICBmb250LWZhbWlseTogQ29uc29sYXMsIE1vbmFjbywgXCJBbmRhbGUgTW9ub1wiLCBcIlVidW50dSBNb25vXCIsIG1vbm9zcGFjZTtcclxuICAgICAgZm9udC1zaXplOiAxZW07XHJcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICAgIHdoaXRlLXNwYWNlOiBwcmU7XHJcbiAgICAgIHdvcmQtc3BhY2luZzogbm9ybWFsO1xyXG4gICAgICB3b3JkLWJyZWFrOiBub3JtYWw7XHJcbiAgICAgIHdvcmQtd3JhcDogbm9ybWFsO1xyXG4gICAgICBsaW5lLWhlaWdodDogMS41O1xyXG5cclxuICAgICAgLW1vei10YWItc2l6ZTogNDtcclxuICAgICAgLW8tdGFiLXNpemU6IDQ7XHJcbiAgICAgIHRhYi1zaXplOiA0O1xyXG5cclxuICAgICAgLXdlYmtpdC1oeXBoZW5zOiBub25lO1xyXG4gICAgICAtbW96LWh5cGhlbnM6IG5vbmU7XHJcbiAgICAgIC1tcy1oeXBoZW5zOiBub25lO1xyXG4gICAgICBoeXBoZW5zOiBub25lO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIENvZGUgYmxvY2tzICovXHJcbiAgICBwcmVbY2xhc3MqPVwibGFuZ3VhZ2UtXCJdIHtcclxuICAgICAgcGFkZGluZzogMWVtO1xyXG4gICAgICBtYXJnaW46IDAuNWVtIDA7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDEuNTVyZW07XHJcbiAgICAgIG92ZXJmbG93OiBhdXRvO1xyXG4gICAgICBib3JkZXItcmFkaXVzOiAwLjNlbTtcclxuICAgIH1cclxuXHJcbiAgICA6bm90KHByZSkgPiBjb2RlW2NsYXNzKj1cImxhbmd1YWdlLVwiXSxcclxuICAgIHByZVtjbGFzcyo9XCJsYW5ndWFnZS1cIl0ge1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjMjcyODIyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIElubGluZSBjb2RlICovXHJcbiAgICA6bm90KHByZSkgPiBjb2RlW2NsYXNzKj1cImxhbmd1YWdlLVwiXSB7XHJcbiAgICAgIHBhZGRpbmc6IDAuMWVtO1xyXG4gICAgICBib3JkZXItcmFkaXVzOiAwLjNlbTtcclxuICAgICAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcclxuICAgIH1cclxuXHJcbiAgICAudG9rZW4uY29tbWVudCxcclxuICAgIC50b2tlbi5wcm9sb2csXHJcbiAgICAudG9rZW4uZG9jdHlwZSxcclxuICAgIC50b2tlbi5jZGF0YSB7XHJcbiAgICAgIGNvbG9yOiBzbGF0ZWdyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgLnRva2VuLnB1bmN0dWF0aW9uIHtcclxuICAgICAgY29sb3I6ICNmOGY4ZjI7XHJcbiAgICB9XHJcblxyXG4gICAgLm5hbWVzcGFjZSB7XHJcbiAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgIH1cclxuXHJcbiAgICAudG9rZW4ucHJvcGVydHksXHJcbiAgICAudG9rZW4udGFnLFxyXG4gICAgLnRva2VuLmNvbnN0YW50LFxyXG4gICAgLnRva2VuLnN5bWJvbCxcclxuICAgIC50b2tlbi5kZWxldGVkIHtcclxuICAgICAgY29sb3I6ICNmOTI2NzI7XHJcbiAgICB9XHJcblxyXG4gICAgLnRva2VuLmJvb2xlYW4sXHJcbiAgICAudG9rZW4ubnVtYmVyIHtcclxuICAgICAgY29sb3I6ICNhZTgxZmY7XHJcbiAgICB9XHJcblxyXG4gICAgLnRva2VuLnNlbGVjdG9yLFxyXG4gICAgLnRva2VuLmF0dHItbmFtZSxcclxuICAgIC50b2tlbi5zdHJpbmcsXHJcbiAgICAudG9rZW4uY2hhcixcclxuICAgIC50b2tlbi5idWlsdGluLFxyXG4gICAgLnRva2VuLmluc2VydGVkIHtcclxuICAgICAgY29sb3I6ICNhNmUyMmU7XHJcbiAgICB9XHJcblxyXG4gICAgLnRva2VuLm9wZXJhdG9yLFxyXG4gICAgLnRva2VuLmVudGl0eSxcclxuICAgIC50b2tlbi51cmwsXHJcbiAgICAubGFuZ3VhZ2UtY3NzIC50b2tlbi5zdHJpbmcsXHJcbiAgICAuc3R5bGUgLnRva2VuLnN0cmluZyxcclxuICAgIC50b2tlbi52YXJpYWJsZSB7XHJcbiAgICAgIGNvbG9yOiAjZjhmOGYyO1xyXG4gICAgfVxyXG5cclxuICAgIC50b2tlbi5hdHJ1bGUsXHJcbiAgICAudG9rZW4uYXR0ci12YWx1ZSxcclxuICAgIC50b2tlbi5mdW5jdGlvbixcclxuICAgIC50b2tlbi5jbGFzcy1uYW1lIHtcclxuICAgICAgY29sb3I6ICNlNmRiNzQ7XHJcbiAgICB9XHJcblxyXG4gICAgLnRva2VuLmtleXdvcmQge1xyXG4gICAgICBjb2xvcjogIzY2ZDllZjtcclxuICAgIH1cclxuXHJcbiAgICAudG9rZW4ucmVnZXgsXHJcbiAgICAudG9rZW4uaW1wb3J0YW50IHtcclxuICAgICAgY29sb3I6ICNmZDk3MWY7XHJcbiAgICB9XHJcblxyXG4gICAgLnRva2VuLmltcG9ydGFudCxcclxuICAgIC50b2tlbi5ib2xkIHtcclxuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB9XHJcbiAgICAudG9rZW4uaXRhbGljIHtcclxuICAgICAgZm9udC1zdHlsZTogaXRhbGljO1xyXG4gICAgfVxyXG5cclxuICAgIC50b2tlbi5lbnRpdHkge1xyXG4gICAgICBjdXJzb3I6IGhlbHA7XHJcbiAgICB9XHJcblxyXG4gICAgcCB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDEuNTVyZW07XHJcbiAgICB9XHJcblxyXG4gICAgaDEsXHJcbiAgICBoMixcclxuICAgIGgzLFxyXG4gICAgaDQsXHJcbiAgICBoNSxcclxuICAgIGg2IHtcclxuICAgICAgbWFyZ2luLXRvcDogMy4xcmVtO1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAxLjU1cmVtO1xyXG4gICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIH1cclxuXHJcbiAgICBoMSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgIH1cclxuXHJcbiAgICAuY29udGVudCA+ICoge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAxLjU1cmVtO1xyXG4gICAgfVxyXG4gIDwvc3R5bGU+XHJcbjwvc3ZlbHRlOmhlYWQ+XHJcblxyXG48ZGl2IGNsYXNzPVwiY29udGFpbmVyIHB5LTI0IGxnOnB5LTI0IHB4LTQgbXgtYXV0byBtYXgtdy02eGxcIj5cclxuICA8R3JhZGllbnRIZWFkaW5nPntwb3N0LnRpdGxlfTwvR3JhZGllbnRIZWFkaW5nPlxyXG5cclxuICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxyXG4gICAge0BodG1sIHBvc3QuaHRtbH1cclxuICA8L2Rpdj5cclxuPC9kaXY+XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2QkUsc0JBQVEsQ0FBQyxBQUFRLEVBQUUsQUFBRSxDQUFDLEFBQ3BCLFNBQVMsQ0FBRSxLQUFLLENBQ2hCLFdBQVcsQ0FBRSxHQUFHLEFBQ2xCLENBQUMsQUFFTywrQ0FBK0MsQUFBRSxDQUFDLEFBQ3hELE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLENBQUMsQ0FDVixNQUFNLENBQUUsQ0FBQyxDQUNULFNBQVMsQ0FBRSxJQUFJLENBQ2YsSUFBSSxDQUFFLE9BQU8sQ0FDYixjQUFjLENBQUUsUUFBUSxBQUMxQixDQUFDLEFBQ08sS0FBSyxBQUFFLENBQUMsQUFDZCxlQUFlLENBQUUsUUFBUSxDQUN6QixjQUFjLENBQUUsQ0FBQyxBQUNuQixDQUFDLEFBRU8sS0FBSyxBQUFFLENBQUMsQUFDZCxlQUFlLENBQUUsUUFBUSxDQUN6QixLQUFLLENBQUUsSUFBSSxBQUNiLENBQUMsQUFDTyxFQUFFLEFBQUUsQ0FBQyxBQUNYLGFBQWEsQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQUFDL0IsQ0FBQyxBQUVPLEVBQUUsQUFBRSxDQUFDLEFBQ1gsV0FBVyxDQUFFLElBQUksQUFDbkIsQ0FBQyxBQUNPLE1BQU0sQUFBRSxDQUFDLEFBQ2YsVUFBVSxDQUFFLElBQUksQ0FDaEIsT0FBTyxDQUFFLEdBQUcsQUFDZCxDQUFDIn0= */